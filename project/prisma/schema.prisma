// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  username      String       @unique
  name          String?
  email         String       @unique
  emailVerified DateTime? // Add this field
  password      String?
  image         String?
  provider      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Account       Account[]
  Session       Session[]
  Rating        Rating[]
  MyGame        MyGame[]
  Playlist      Playlist[]
  Collection    Collection[]
  Favourite     Favourite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id                 String       @id @default(cuid())
  igdb_id            Int          @unique
  name               String?
  summary            String?
  storyline          String?
  first_release_date String?
  total_rating       Float?
  cover              String?
  game_type          GameType     @default(Main_Game)
  genres             Genre[]      @relation("GameGenres")
  platforms          Platform[]   @relation("GamePlatforms")
  ratings            Rating[]
  myGames            MyGame[]
  playlists          Playlist[]
  collections        Collection[] @relation("CollectionGames")
  Favourite          Favourite[]
}

model Rating {
  id              String        @id @default(cuid())
  userId          String
  gameId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  game            Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user_rating     Int?
  played_platform UserPlatform?

  @@unique([userId, gameId])
}

model MyGame {
  id             String        @id @default(cuid())
  userId         String
  gameId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  game           Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  owned_platform UserPlatform?
  hours_played   Float?        @default(0)
  status         GameStatus?   @default(NOT_STARTED)
}

model Playlist {
  id     String @id @default(cuid())
  userId String
  gameId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model Favourite {
  id     String @id @default(cuid())
  userId String
  gameId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model Collection {
  id          String               @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  cover       String?
  visibility  CollectionVisibility @default(PRIVATE)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  games Game[] @relation("CollectionGames")
}

model Platform {
  id    String @id @default(cuid())
  name  String @unique // Add @unique
  games Game[] @relation("GamePlatforms")
}

model Genre {
  id    String @id @default(cuid())
  name  String @unique // Add @unique
  games Game[] @relation("GameGenres")
}

enum GameType {
  Main_Game
  Expansion
  Expanded_Game
}

enum UserPlatform {
  MAC
  ANDROID
  IOS
  PLAYSTATION
  WINDOWS
  XBOX
  NINTENDO
  LINUX
  ARCADE
  WII
}

enum GameStatus {
  NOT_STARTED
  PLAYING
  COMPLETED
  ABANDONED
}

enum CollectionVisibility {
  PRIVATE
  PUBLIC
}

